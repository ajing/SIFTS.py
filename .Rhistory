surface <- read.table("./Result/avedist2surface.txt_small", sep = "\t", header = F)
library("ggplot2")
View(surface)
View(surface)
View(surface)
colnames(surface)<-c("pdbid", "chainid", "resnum", "resnam", "surf_dist", "surf_dist_alpha")
View(surface)
qplot(surf_dist, data = surface)
qplot(surf_dist, data = surface, geom="density")
qplot(surf_dist, data = surface, geom="density", log="x")
qplot(surf_dist, data = surface, geom="density", log="x") + qplot(surf_dist, data = surface, geom="density", log="x")
qplot(surf_dist, data = surface, geom="density", log="x") + ggplot(surface, aes(surf_dist_alpha)) + geom_histogram()
ggplot(surface, aes(surf_dist_alpha)) + geom_histogram()
surface <- melt(surface, id = c("pdbid","chainid","resnam","surf_dist","sur_dist_alpha"))
library("reshape")
library("reshape")
install.packages("reshape")
install.packages("reshape2")
library("reshape2")
surface <- melt(surface, id = c("pdbid","chainid","resnum", "resnam"))
View(surface)
View(surface)
qplot(value, data = surface, color = variable, geom="density", log="x")
library("ggplot2")
qplot(value, data = surface, color = variable, geom="density", log="x")
summary(surface)
newsurf<-subset(surface, value != "None")
summary(newsurf)
newsurf<-data.frame(newsurf)
summary(newsurf)
subset(newsurf, is.numeric(value))
subset(newsurf, !is.numeric(value))
subset(newsurf, !is.na(as.numeric(value))
)
subset(newsurf, is.na(as.numeric(value)))
surface <- newsurf
rm(newsurf)
surface$value <- as.numeric(surface$value)
summary(surface)
qplot(value, data = surface, color = variable, geom="density", log="x")
last_plot() + coord_cartesian(xlim = c(1, 100))
qplot(value, data = surface, color = resname, geom="density", log="x")
qplot(value, data = surface, color = resnam, geom="density", log="x")
qplot(value, data = surface, geom="density", log="x") + facet_grid(resnam~.)
qplot(value, data = surface, geom="density", log="x") + facet_wrap(resnam~.)
unique
aanam = unique(surface$resnam)
aanam
aanam <- c('ALA', 'ARG', 'ASN', 'ASP', 'ASX', 'CYS', 'GLU', 'GLN', 'GLX', 'GLY', 'HIS', 'ILE', 'LEU', 'LYS', 'MET', 'PHE', 'PRO', 'SER', 'THR', 'TRP', 'TYR', 'VAL')
qplot(value, data = subset(surface,resnam %in% aanam[:10]), color = resnam, geom="density", log="x")
aanam[:10]
aanam[1]
aanam[1:10]
qplot(value, data = subset(surface,resnam %in% aanam[1:11]), color = resnam, geom="density", log="x")
qplot(value, data = subset(surface,resnam %in% aanam[1:11]), color = resnam, geom="density", log="x") + coord_cartesian(xlim = c(1,50))
qplot(value, data = subset(surface,resnam %in% aanam[1:11]), color = resnam, geom="density", log="x") + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[1:11]), color = resnam, geom="density") + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% c("HIS")), color = resnam, geom="density") + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density") + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density" size = 2) + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density", size = 2) + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density", size = 1) + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density") + geom_line(aes(size=2)) + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density", size=1) + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density") + coord_cartesian(xlim = c(1,10))
qplot(log(value), data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density") + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density") + coord_cartesian(xlim = c(1,10))
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density") + coord_cartesian(xlim = c(1,10)) + scale_x_continuous(trans=log2_trans())
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density") + coord_cartesian(xlim = c(1,10)) + coord_trans(x="log2")
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density")  + coord_trans(x="log2")+ coord_cartesian(xlim = c(1,10))
library(scale)
library("scale")
library("scales")
qplot(value, data = subset(surface,resnam %in% aanam[12:22]), color = resnam, geom="density")  + scale_x_continuous(trans=log2_trans())+ coord_cartesian(xlim = c(1,10))
length(subset(surface, value == 0))
snp_dist <-read.csv(".\Result\snp_dist.txt",sep="\t", header=F)
snp_dist <-read.csv(r".\Result\snp_dist.txt",sep="\t", header=F)
snp_dist <-read.csv("./Result/snp_dist.txt",sep="\t", header=F)
View(snp_dist)
View(snp_dist)
colnames(snp_dist)<-c("pdbid","snpid1","chainid1","resnam1","resnum1","snpid2","chainid2","resnam2","resnum2", "spa_dist","seq_dist")
View(snp_dist)
qplot(spa_dist, seq_dist, data=snp_dist)
ggplot(spa_dist, aes(x=spa_dist, y=seq_dist)) + stat_bin()
ggplot(snp_dist, aes(x=spa_dist, y=seq_dist)) + stat_bin()
ggplot(snp_dist, aes(x=spa_dist, y=seq_dist)) + geom_bin2d()
ggplot(subset(snp_dist, seq_dist != False), aes(x=spa_dist, y=seq_dist)) + geom_bin2d()
ggplot(subset(snp_dist, seq_dist != F), aes(x=spa_dist, y=seq_dist)) + geom_bin2d()
summary(snp_dist)
ggplot(subset(snp_dist, seq_dist != False), aes(x=spa_dist, y=seq_dist)) + geom_bin2d()
ggplot(subset(snp_dist, seq_dist != FALSE), aes(x=spa_dist, y=seq_dist)) + geom_bin2d()
summary(subset(snp_dist, seq_dist != FALSE))
summary(subset(snp_dist, seq_dist != 'FALSE'))
summary(subset(snp_dist, seq_dist != 'False'))
snp_dist_nofalse <- subset(snp_dist, seq_dist != 'False')
snp_dist_nofalse$seq_dist <- as.numeric(snp_dist_nofalse$seq_dist)
summary(snp_dist_nofalse)
ggplot(subset(snp_dist_nofalse, seq_dist != FALSE), aes(x=spa_dist, y=seq_dist)) + geom_bin2d()
humsavar <- read.csv("./Data/humsavar_tru.txt",sep="\t",header=F)
View(humsavar)
humsavar <- read.csv("./Data/humsavar_tru.txt",header=F)
humsavar <- read.table("./Data/humsavar_tru.txt",header=F)
humsavar <- read.table("./Data/humsavar_tru.txt.out", sep="\t",header=F)
View(humsavar)
humsavar <- read.table("./Data/humsavar_tru.txt.out", sep="\t",header=F, quote="")
View(humsavar)
humsavar <- subset(humsavar, V6 !="-")
humsavar <- humsavar[,c("V5","V6")]
View(humsavar)
colnames(humsavar)<-c("type", "snpid")
View(humsavar)
snp_dist_nof_var<-merge(x = snp_dist_nofalse, y = humsavar, by = "snpid", all.x=TRUE)
View(snp_dist_nofalse)
snp_dist_nof_var<-merge(x = snp_dist_nofalse, y = humsavar, by.x = "snpid1", by.y="snpid2", all.x=TRUE)
snp_dist_nof_var<-merge(x = snp_dist_nofalse, y = humsavar, by.x = "snpid1", by.y="snpid", all.x=TRUE)
View(snp_dist_nof_var)
colnames(snp_dist_nof_var)[-1]
colnames(snp_dist_nof_var)[11]
colnames(snp_dist_nof_var)[12]
colnames(snp_dist_nof_var)[12]<- "type1"
snp_dist_nof_var<-merge(x = snp_dist_nof_var, y = humsavar, by.x = "snpid2", by.y="snpid", all.x=TRUE)
View(snp_dist_nof_var)
summary(snp_dist_nof_var)
table(snp_dist_nof_var$pdbid)
as.data.frame(table(snp_dist_nof_var$pdbid)()
)
as.data.frame(table(snp_dist_nof_var$pdbid))
dim(as.data.frame(table(snp_dist_nof_var$pdbid)))
ggplot(snp_dist_nof_var, aes(x=spa_dist, y=seq_dist)) + geom_bin2d()
ggplot(snp_dist_nof_var, aes(x=spa_dist, y=seq_dist, color = type1)) + geom_bin2d()
ggplot(snp_dist_nof_var, aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type ~.)
ggplot(snp_dist_nof_var, aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" && type2 != "unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 ~.)
colnames(snp_dist_nof_var)[14]
colnames(snp_dist_nof_var)[13]
colnames(snp_dist_nof_var)[13] <- "type2"
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" | type2 != "unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" | type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" | type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 + type2 ~.)
summary(subset(snp_dist_nof_var,type1 != "Unclassified" | type2 != "Unclassified"))
summary(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(c(type1, type2) ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_bin2d() + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_density2d() + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_contour() + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(aes(fill=..level..)) + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_density2d(aes(fill=..level..)) + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_smooth(aes(fill=..level..)) + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + geom_density2d(aes(fill=..level..)) + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist, fill=..level..)) + geom_density2d( + facet_grid(type1 + type2 ~.)
)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist, fill=..level..)) + geom_density2d() + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist, fill=..level..)) + stat_density2d() + geom_tile()+ facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(aes(fill=..level..)) + geom_tile()+ facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(aes(fill=..level..)) + geom_tile()+ scale_fill_gradient(limits=c(0,0.04)) + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(aes(fill=..level..)) + geom_tile()+ scale_fill_gradient(limits=c(0,0.04), low="white",high="black") + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(aes(fill=..level..), geom="tile") + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(aes(fill=..level..), geom="polygon") + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(aes(fill=..level..), geom="bin") + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(aes(fill=..level..), geom="bin2d") + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..level..), contour=FALSE) + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type1 + type2 ~., scales = "free_z")
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type1 + type2 ~., scales = "free_y")
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type1 + type2 ~.)
add_type_column <- function(onerow){
if (onerow$type1 == onerow$type2) {
onerow$type = paste(onerow$type1, onerow$type2)
} else {
onerow$type = "Polymorphism Disease"
}
}
lapply(snp_dist_nof_var, add_type_column)
source('~/SIFTS.py/analysis.R')
View(snp_dist_nof_var)
apply(snp_dist_nof_var, 1, add_type_column)
add_type_column <- function(onerow){
print(onerow)
if (onerow[,"type1"] == onerow[,"type2"]) {
onerow[,"type1"] = paste(onerow[,"type1"], onerow[,"type2"])
} else {
onerow[,"type"] = "Polymorphism Disease"
      oddsci   <- tryCatch({
        boot.ci(oddsboot, type = "norm")
      }, error = function(err) { cannot_proc = T })
      
      if (oddsci | oodsboot) {
        next
      }
      
      print(oddsci)
      
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"estimate"] = oddsci$t0
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_low"] = oddsci$normal[2]
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_up"] = oddsci$normal[3]
    }
  }
  
  print(ratio_amino)
  # plot the graph
  ratio_amino_sort <- ratio_amino[with(ratio_amino, order(-estimate)),]
  ratio_amino[, interested_par] <- factor(ratio_amino[, interested_par], levels = as.character(subset(ratio_amino_sort, vartypes == "Disease")[, interested_par]))
  
  # for aa_change
  ratio_amino <- subset(ratio_amino, pvalue < 0.05 & estimate > 0 & is.finite(estimate) & vartypes %in% c("Disease", "Polymorphism"))
  common_change <- intersect(subset(ratio_amino, vartypes == "Disease")$aa_change, subset(ratio_amino, vartypes == "Polymorphism")$aa_change)
  ratio_amino <- subset(ratio_amino, aa_change %in% common_change)
  
  ggplot(subset(ratio_amino, vartypes %in% c("Disease", "Polymorphism")), aes_string(x = interested_par, y = "estimate", ymin = "ci_low", ymax = "ci_up")) + geom_pointrange(aes(col = vartypes), position=position_dodge(width=0.30))  + ylab("Odds ratio & 95% CI") + geom_hline(aes(yintercept = 1)) + xlab("") + scale_y_log10()  
  ggsave(filename = "tmp.pdf", height=3, width=12)
  
  ratio_amino
}
ratio_amino <- aa_change_preference(protein_annotate_onlysnp, "aa_change")
aa_change_preference <- function(p_annotate_bs, interested_par){
  aa_change <- factor(unique(p_annotate_bs[,interested_par]))
  vartypes   = c("Disease", "Polymorphism", "Unclassified")
  ratio_amino <- data.frame(merge(aa_change, vartypes, all = TRUE))
  colnames(ratio_amino) <- c(interested_par, "vartypes")
  print(ratio_amino)
  for (vartype in vartypes) {
    for (each in aa_change){
      
      print(each)
      print(vartype)
      
      cannot_proc <- F
      
      oddsratio_fun <- function(d, i) {
        or <- fisher.test(table(data.frame(residueName = (d[i,interested_par] == each), Disease = d[i, "VarType"] == vartype)))$estimate[[1]]
        or
      }
      
      oddsboot <- tryCatch({
        boot(p_annotate_bs, oddsratio_fun, R = 100, parallel = "multicore")
        
      }, error = function(err) { cannot_proc = T })
      
      oddsci   <- tryCatch({
        boot.ci(oddsboot, type = "norm")
      }, error = function(err) { cannot_proc = T })
      
      if (oddsci | oddsboot) {
        next
      }
      
      print(oddsci)
      
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"estimate"] = oddsci$t0
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_low"] = oddsci$normal[2]
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_up"] = oddsci$normal[3]
    }
  }
  
  print(ratio_amino)
  # plot the graph
  ratio_amino_sort <- ratio_amino[with(ratio_amino, order(-estimate)),]
  ratio_amino[, interested_par] <- factor(ratio_amino[, interested_par], levels = as.character(subset(ratio_amino_sort, vartypes == "Disease")[, interested_par]))
  
  # for aa_change
  ratio_amino <- subset(ratio_amino, pvalue < 0.05 & estimate > 0 & is.finite(estimate) & vartypes %in% c("Disease", "Polymorphism"))
  common_change <- intersect(subset(ratio_amino, vartypes == "Disease")$aa_change, subset(ratio_amino, vartypes == "Polymorphism")$aa_change)
  ratio_amino <- subset(ratio_amino, aa_change %in% common_change)
  
  ggplot(subset(ratio_amino, vartypes %in% c("Disease", "Polymorphism")), aes_string(x = interested_par, y = "estimate", ymin = "ci_low", ymax = "ci_up")) + geom_pointrange(aes(col = vartypes), position=position_dodge(width=0.30))  + ylab("Odds ratio & 95% CI") + geom_hline(aes(yintercept = 1)) + xlab("") + scale_y_log10()  
  ggsave(filename = "tmp.pdf", height=3, width=12)
  
  ratio_amino
>>>>>>> ff60345862071f52bfad8b6f649e3622faf8949b
}
ratio_amino <- aa_change_preference(protein_annotate_onlysnp, "aa_change")
aa_change_preference <- function(p_annotate_bs, interested_par){
  aa_change <- factor(unique(p_annotate_bs[,interested_par]))
  vartypes   = c("Disease", "Polymorphism", "Unclassified")
  ratio_amino <- data.frame(merge(aa_change, vartypes, all = TRUE))
  colnames(ratio_amino) <- c(interested_par, "vartypes")
  print(ratio_amino)
  for (vartype in vartypes) {
    for (each in aa_change){
      
      print(each)
      print(vartype)
      
      cannot_proc <- F
      
      oddsratio_fun <- function(d, i) {
        or <- fisher.test(table(data.frame(residueName = (d[i,interested_par] == each), Disease = d[i, "VarType"] == vartype)))$estimate[[1]]
        or
      }
      
      oddsboot <- tryCatch({
        boot(p_annotate_bs, oddsratio_fun, R = 100, parallel = "multicore")
        
      }, error = function(err) { cannot_proc <<- T })
      
      oddsci   <- tryCatch({
        boot.ci(oddsboot, type = "norm")
      }, error = function(err) { cannot_proc <<- T })
      
      if (oddsci | oddsboot) {
        next
      }
      
      print(oddsci)
      
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"estimate"] = oddsci$t0
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_low"] = oddsci$normal[2]
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_up"] = oddsci$normal[3]
    }
  }
  
  print(ratio_amino)
  # plot the graph
  ratio_amino_sort <- ratio_amino[with(ratio_amino, order(-estimate)),]
  ratio_amino[, interested_par] <- factor(ratio_amino[, interested_par], levels = as.character(subset(ratio_amino_sort, vartypes == "Disease")[, interested_par]))
  
  # for aa_change
  ratio_amino <- subset(ratio_amino, pvalue < 0.05 & estimate > 0 & is.finite(estimate) & vartypes %in% c("Disease", "Polymorphism"))
  common_change <- intersect(subset(ratio_amino, vartypes == "Disease")$aa_change, subset(ratio_amino, vartypes == "Polymorphism")$aa_change)
  ratio_amino <- subset(ratio_amino, aa_change %in% common_change)
  
  ggplot(subset(ratio_amino, vartypes %in% c("Disease", "Polymorphism")), aes_string(x = interested_par, y = "estimate", ymin = "ci_low", ymax = "ci_up")) + geom_pointrange(aes(col = vartypes), position=position_dodge(width=0.30))  + ylab("Odds ratio & 95% CI") + geom_hline(aes(yintercept = 1)) + xlab("") + scale_y_log10()  
  ggsave(filename = "tmp.pdf", height=3, width=12)
  
  ratio_amino
}
ratio_amino <- aa_change_preference(protein_annotate_onlysnp, "aa_change")
aa_change_preference <- function(p_annotate_bs, interested_par){
  aa_change <- factor(unique(p_annotate_bs[,interested_par]))
  vartypes   = c("Disease", "Polymorphism", "Unclassified")
  ratio_amino <- data.frame(merge(aa_change, vartypes, all = TRUE))
  colnames(ratio_amino) <- c(interested_par, "vartypes")
  print(ratio_amino)
  for (vartype in vartypes) {
    for (each in aa_change){
      
      print(each)
      print(vartype)
      
      cannot_proc <- F
      
      oddsratio_fun <- function(d, i) {
        or <- fisher.test(table(data.frame(residueName = (d[i,interested_par] == each), Disease = d[i, "VarType"] == vartype)))$estimate[[1]]
        or
      }
      
      oddsboot <- tryCatch({
        boot(p_annotate_bs, oddsratio_fun, R = 100, parallel = "multicore")
        
      }, error = function(err) { cannot_proc <<- T })
      
      oddsci   <- tryCatch({
        boot.ci(oddsboot, type = "norm")
      }, error = function(err) { cannot_proc <<- T })
      
      if (cannot_proc) {
        next
      }
      
      print(oddsci)
      
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"estimate"] = oddsci$t0
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_low"] = oddsci$normal[2]
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_up"] = oddsci$normal[3]
    }
  }
  
  print(ratio_amino)
  # plot the graph
  ratio_amino_sort <- ratio_amino[with(ratio_amino, order(-estimate)),]
  ratio_amino[, interested_par] <- factor(ratio_amino[, interested_par], levels = as.character(subset(ratio_amino_sort, vartypes == "Disease")[, interested_par]))
  
  # for aa_change
  ratio_amino <- subset(ratio_amino, pvalue < 0.05 & estimate > 0 & is.finite(estimate) & vartypes %in% c("Disease", "Polymorphism"))
  common_change <- intersect(subset(ratio_amino, vartypes == "Disease")$aa_change, subset(ratio_amino, vartypes == "Polymorphism")$aa_change)
  ratio_amino <- subset(ratio_amino, aa_change %in% common_change)
  
  ggplot(subset(ratio_amino, vartypes %in% c("Disease", "Polymorphism")), aes_string(x = interested_par, y = "estimate", ymin = "ci_low", ymax = "ci_up")) + geom_pointrange(aes(col = vartypes), position=position_dodge(width=0.30))  + ylab("Odds ratio & 95% CI") + geom_hline(aes(yintercept = 1)) + xlab("") + scale_y_log10()  
  ggsave(filename = "tmp.pdf", height=3, width=12)
  
  ratio_amino
}
ratio_amino <- aa_change_preference(protein_annotate_onlysnp, "aa_change")
aa_change_preference <- function(p_annotate_bs, interested_par){
  aa_change <- factor(unique(p_annotate_bs[,interested_par]))
  vartypes   = c("Disease", "Polymorphism", "Unclassified")
  ratio_amino <- data.frame(merge(aa_change, vartypes, all = TRUE))
  colnames(ratio_amino) <- c(interested_par, "vartypes")
  print(ratio_amino)
  for (vartype in vartypes) {
    for (each in aa_change){
      
      print(each)
      print(vartype)
      
      cannot_proc <- F
      
      oddsratio_fun <- function(d, i) {
        or <- fisher.test(table(data.frame(residueName = (d[i,interested_par] == each), Disease = d[i, "VarType"] == vartype)))$estimate[[1]]
        or
      }
      
      oddsboot <- tryCatch({
        boot(p_annotate_bs, oddsratio_fun, R = 100, parallel = "multicore")
        
      }, error = function(err) { cannot_proc <<- T })
      
      oddsci   <- tryCatch({
        boot.ci(oddsboot, type = "norm")
      }, error = function(err) { cannot_proc <<- T })
      
      if (cannot_proc) {
        next
      }
      
      print(oddsci)
      
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"estimate"] = oddsci$t0
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_low"] = oddsci$normal[2]
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_up"] = oddsci$normal[3]
    }
  }
  
  print(ratio_amino)
  # plot the graph
  ratio_amino_sort <- ratio_amino[with(ratio_amino, order(-estimate)),]
  ratio_amino[, interested_par] <- factor(ratio_amino[, interested_par], levels = as.character(subset(ratio_amino_sort, vartypes == "Disease")[, interested_par]))
  
  # for aa_change
  ratio_amino <- subset(ratio_amino, (ci_low - 1) * (ci_up - 1) > 0 & estimate > 0 & is.finite(estimate) & vartypes %in% c("Disease", "Polymorphism"))
  common_change <- intersect(subset(ratio_amino, vartypes == "Disease")$aa_change, subset(ratio_amino, vartypes == "Polymorphism")$aa_change)
  ratio_amino <- subset(ratio_amino, aa_change %in% common_change)
  
  ggplot(subset(ratio_amino, vartypes %in% c("Disease", "Polymorphism")), aes_string(x = interested_par, y = "estimate", ymin = "ci_low", ymax = "ci_up")) + geom_pointrange(aes(col = vartypes), position=position_dodge(width=0.30))  + ylab("Odds ratio & 95% CI") + geom_hline(aes(yintercept = 1)) + xlab("") + scale_y_log10()  
  ggsave(filename = "tmp.pdf", height=3, width=12)
  
  ratio_amino
}
ratio_amino <- aa_change_preference(protein_annotate_onlysnp, "aa_change")
aa_change_preference <- function(p_annotate_bs, interested_par){
  aa_change <- factor(unique(p_annotate_bs[,interested_par]))
  vartypes   = c("Disease", "Polymorphism", "Unclassified")
  ratio_amino <- data.frame(merge(aa_change, vartypes, all = TRUE))
  colnames(ratio_amino) <- c(interested_par, "vartypes")
  print(ratio_amino)
  for (vartype in vartypes) {
    for (each in aa_change){
      
      cannot_proc <- F
      
      oddsratio_fun <- function(d, i) {
        or <- fisher.test(table(data.frame(residueName = (d[i,interested_par] == each), Disease = d[i, "VarType"] == vartype)))$estimate[[1]]
        or
      }
      
      oddsboot <- tryCatch({
        boot(p_annotate_bs, oddsratio_fun, R = 1000, parallel = "multicore")
        
      }, error = function(err) { cannot_proc <<- T })
      
      oddsci   <- tryCatch({
        boot.ci(oddsboot, type = "norm")
      }, error = function(err) { cannot_proc <<- T })
      
      if (cannot_proc) {
        next
      }
      
      print(oddsci)
      
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"estimate"] = oddsci$t0
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_low"] = oddsci$normal[2]
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_up"] = oddsci$normal[3]
    }
  }
  
  print(ratio_amino)
  # plot the graph
  ratio_amino_sort <- ratio_amino[with(ratio_amino, order(-estimate)),]
  ratio_amino[, interested_par] <- factor(ratio_amino[, interested_par], levels = as.character(subset(ratio_amino_sort, vartypes == "Disease")[, interested_par]))
  
  # for aa_change
  ratio_amino <- subset(ratio_amino, (ci_low - 1) * (ci_up - 1) > 0 & estimate > 0 & is.finite(estimate) & vartypes %in% c("Disease", "Polymorphism"))
  common_change <- intersect(subset(ratio_amino, vartypes == "Disease")$aa_change, subset(ratio_amino, vartypes == "Polymorphism")$aa_change)
  ratio_amino <- subset(ratio_amino, aa_change %in% common_change)
  
  ggplot(subset(ratio_amino, vartypes %in% c("Disease", "Polymorphism")), aes_string(x = interested_par, y = "estimate", ymin = "ci_low", ymax = "ci_up")) + geom_pointrange(aes(col = vartypes), position=position_dodge(width=0.30))  + ylab("Odds ratio & 95% CI") + geom_hline(aes(yintercept = 1)) + xlab("") + scale_y_log10()  
  ggsave(filename = "tmp.pdf", height=3, width=12)
  
  ratio_amino
}
ratio_amino <- aa_change_preference(protein_annotate_onlysnp, "aa_change")
unique(protein_annotate_withsnp$UniProtID)
length(unique(subset(protein_annotate_withsnp, VarType == "Disease")$UniProtID))
length(unique(subset(protein_annotate_withsnp, VarType == "Polymorphism")$UniProtID))
length(unique(subset(protein_annotate_withsnp, VarType == "Unclassified")$UniProtID))
protein_annotate<- read.table("./Data/SNPOnStruct_final_8.txt", sep = "\t", header = F, quote = "", na.string = "\\N")
#
colnames(protein_annotate)<-c("pdbid", "biounit", "ModelID", "chainid", "resnam", "resnum", "structcode", "ssa", "rsa", "UniProtID", "uniprot_resnam", "uniprot_resnum", "bs_biounit", "bs_p_chainid", "bs_p_resnum", "ligandName", "BindingSiteComment", "distance", "genename", "SwissProt_AC", "FTID", "AABefore", "prot_resnum", "AAAfter", "VarType", "dbSNPID", "DiseaseName", "uniprot_resnam_3d", "AABeforeProp", "AAAfterProp", "proteinname", "reviewed", "gene_name_acc", "interproname_acc")
protein_annotate$location = "Core"
#MAX_ACC["GLY"] = 84.0
protein_annotate$location[protein_annotate$ssa > 5] = "Surface"
protein_annotate[ which(protein_annotate$distance <= 4.0 | !is.na(protein_annotate$BindingSiteComment)),'location'] = "Binding Site"
snp_num = ddply(protein_annotate, .(UniProtID), summarise, N = length(unique(uniprot_resnum[!is.na(VarType)])))
protein_annotate_withsnp = subset(protein_annotate, UniProtID %in% factor(unique(subset(protein_annotate, !is.na(VarType))$UniProtID)))
length(unique(protein_annotate_withsnp$UniProtID))
length(unique(subset(protein_annotate_withsnp, VarType == "Disease")$UniProtID))
length(unique(subset(protein_annotate_withsnp, VarType == "Polymorphism")$UniProtID))
length(unique(subset(protein_annotate_withsnp, VarType == "Unclassified")$UniProtID))
length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Disease"))$UniProtID))
disease =  245
polymor =  580
unclass =  149
dis_pol =  length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Disease"))$UniProtID))
pol_unc =  length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Unclassified"))$UniProtID))
dis_unc =  length(unique(subset(protein_annotate_withsnp, VarType %in% c("Unclassified", "Disease"))$UniProtID))
dis_unc
install.packages("VennDiagram")
library(VennDiagram)
library(VennDiagram)
install.packages("VennDiagram")
library(VennDiagram)
library(VennDiagram)
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.col=c("red", "blue", "orange"), cat.pos = 3)
dev.off()
dev.off()
disease =  245
polymor =  580
unclass =  149
dis_pol =  disease + polymor - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Disease"))$UniProtID))
pol_unc =  polymor + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Unclassified"))$UniProtID))
dis_unc =  disease + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Unclassified", "Disease"))$UniProtID))
dis_unc_poly = disease + unclass + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Unclassified", "Disease", "Unclassified"))$UniProtID))
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.col=c("red", "blue", "orange"), cat.pos = 3)
dev.off()
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.col=c("red", "blue", "orange"), cat.pos = 3)
dis_unc_poly
disease =  245
polymor =  580
unclass =  149
dis_pol =  disease + polymor - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Disease"))$UniProtID))
pol_unc =  polymor + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Unclassified"))$UniProtID))
dis_unc =  disease + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Unclassified", "Disease"))$UniProtID))
dis_unc_poly = (disease + unclass + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Unclassified", "Disease", "Unclassified"))$UniProtID))) / 2
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.col=c("red", "blue", "orange"), cat.pos = 3)
dev.off()
dev.off()
dis_pol =  disease + polymor - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Disease"))$UniProtID))
pol_unc =  polymor + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Unclassified"))$UniProtID))
dis_unc =  disease + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Unclassified", "Disease"))$UniProtID))
dis_unc_poly = (disease + polymor + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Unclassified", "Disease", "Unclassified"))$UniProtID))) / 2
dis_unc_poly
all_vartype <- protein_annotate_withsnp %>%
  group_by(UniProtID) %>%
  summarise(vartype_n = n_distinct(VarType)) %>%
  filter(vartype_n > 2)
names(all_vartype)
all_vartype
dim(all_vartype)
unique(protein_annotate_withsnp$VarType)
all_vartype <- protein_annotate_withsnp %>%
  group_by(UniProtID) %>%
  summarise(vartype_n = n_distinct(VarType)) %>%
  filter(vartype_n > 3)
dim(all_vartype)
dis_pol =  disease + polymor - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Disease"))$UniProtID))
pol_unc =  polymor + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Polymorphism", "Unclassified"))$UniProtID))
dis_unc =  disease + unclass - length(unique(subset(protein_annotate_withsnp, VarType %in% c("Unclassified", "Disease"))$UniProtID))
dis_unc_poly = 41
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.col=c("red", "blue", "orange"), cat.pos = 3)
dev.off()
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.col=c("red", "blue", "orange"))
dev.off()
 paste("Num", 1:100)
venn.plot <- venn.diagram( x = list("Disease" = unique(subset(protein_annotate_withsnp, VarType == "Disease")$UniProtID), "Polymorphism" = unique(subset(protein_annotate_withsnp, VarType == "Polymorphism")$UniProtID), "Unclassified" = unique(subset(protein_annotate_withsnp, VarType == "Unclassified")$UniProtID)), filename = "Euler_3set_simple.tiff")
venn.plot <- venn.diagram( x = list("Disease" = unique(subset(protein_annotate_withsnp, VarType == "Disease")$UniProtID), "Polymorphism" = unique(subset(protein_annotate_withsnp, VarType == "Polymorphism")$UniProtID), "Unclassified" = unique(subset(protein_annotate_withsnp, VarType == "Unclassified")$UniProtID)), filename = "vennplot.pdf")
install.packages("grDevices")
unique(subset(protein_annotate_withsnp, VarType == "Disease")$UniProtID)
pdf("vennplot.pdf", width = 8)
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.col=c("red", "blue", "orange"))
dev.off()
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.dist = c(0.05, 0.05, 0.025), cat.col=c("red", "blue", "orange"))
dev.off()
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.dist = c(0.05, 0, 0.025), cat.col=c("red", "blue", "orange"))
dev.off()
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.pos = c(-40, 35, 180), cat.col=c("red", "blue", "orange"))
dev.off()
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.pos = c(-40, 34, 180), cat.col=c("red", "blue", "orange"))
dev.off()
pdf("vennplot.pdf")
venn.plot <- draw.triple.venn(disease, polymor, unclass, dis_pol, pol_unc, dis_unc, dis_unc_poly, category = c("Disease", "Polymorphism", "Unclassified"), fill = c("red", "blue", "orange"), cex = 2, cat.cex=2, cat.pos = c(-40, 32, 180), cat.col=c("red", "blue", "orange"))
dev.off()
subset(protein_annotate_withsnp, UniProtID == "P04637") 
dim(subset(protein_annotate_withsnp, UniProtID == "P04637"))
with(subset(protein_annotate_withsnp, UniProtID == "P04637"), table(location))
with(subset(protein_annotate_withsnp, UniProtID == "P04637"), table(location, VarType))
with(subset(protein_annotate_withsnp, UniProtID == "P04637" & VarType == "Unclassified"), table(location, UniProtID))
with(subset(protein_annotate_withsnp, UniProtID == "P04637" & VarType == "Unclassified"), table(location, factor(UniProtID)))
with(subset(protein_annotate_withsnp, VarType == "Unclassified"), table(location, factor(UniProtID)))
with(subset(protein_annotate_withsnp, VarType == "Unclassified"), table(location, factor(UniProtID)))
subset(allo_site, table(UniProtID, allosite))
with(allo_site, table(UniProtID, allosite))
with(allo_site, table(factor(UniProtID), allosite))
dis_pol / disease
count(unique(protein_annotate_withsnp$UniProtID))
count(unique(factor(protein_annotate_withsnp$UniProtID)))
count(unique(as.charactor(protein_annotate_withsnp$UniProtID)))
count(unique(as.character(protein_annotate_withsnp$UniProtID)))
names(protein_annotate_withsnp)
count(unique(protein_annotate_withsnp$UniProtID))
length(unique(protein_annotate_withsnp$UniProtID))
114/697
83/697
67/697
63/697
35/697
20/697
allo_site
names(allo_site)
unique(allo_site$allosite)
unique(with(allo_site, VarType == "Unclassified"))
unique(subset(allo_site, allosite == Allo & VarType == "Unclassified"))
unique(subset(allo_site, allosite == "Allo" & VarType == "Unclassified"))
unique(subset(allo_site, allosite == "Allo" & VarType == "Unclassified")$UniProtID)
with(subset(allo_site, allosite == "Allo" & VarType == "Unclassified"), tableï¼ïï¼?e(UniProtID, VarType))
with(subset(allo_site, allosite == "Allo" & VarType == "Unclassified"), table(UniProtID, VarType))
with(subset(allo_site, allosite == "Allo" & VarType == "Unclassified"), table(factor(UniProtID), VarType))
with(subset(allo_site, allosite == "Allo"), table(factor(UniProtID), VarType))
with(allo_site, table(factor(UniProtID), VarType, allosite))
with(allo_site, table(factor(UniProtID), VarType))
sc_volumn = data.frame(AAName = c("ALA","CYS","ASP","GLU","PHE","GLY","HIS","ILE","LYS","LEU","MET","ASN","PRO","GLN","ARG","SER","THR","VAL","TRP","TYR"), volumn = c(106.0,135.0,163.0,194.0,197.0,84.0,184.0,169.0,205.0,164.0,188.0,157.0,136.0,198.0,248.0,130.0,142.0,142.0,227.0,222.0))
sc_volumn$volumn.c = cut(sc_volumn$volumn, breaks=3, label = c("small", "medium", "large"))
protein_annotate_onlysnp$volumn_change <- apply(protein_annotate_onlysnp, 1, function(x) { paste(as.character(sc_volumn[sc_volumn$AAName == x[["AABefore"]], "volumn.c"]), "to", as.character(sc_volumn[sc_volumn$AAName == x[["AAAfter"]], "volumn.c"]))})
ratio_amino <- aa_change_preference(protein_annotate_onlysnp, "volumn_change")
aa_change_preference <- function(p_annotate_bs, interested_par){
  aa_change <- factor(unique(p_annotate_bs[,interested_par]))
  vartype = "Disease"
  vartypes   = c("Disease", "Polymorphism", "Unclassified")
  ratio_amino <- data.frame(merge(aa_change, vartypes, all = TRUE))
  colnames(ratio_amino) <- c(interested_par, "vartypes")
  for (vartype in vartypes) {
    for (each in aa_change){
      each = as.character(each)
      table_res <- table(deal_with_na(p_annotate_bs$VarType == vartype),
                         deal_with_na(as.character(p_annotate_bs[,interested_par]) == each))
      table_res <- apply(table_res, 1:2, as.numeric)
      rownames(table_res) <- c(paste("Not", vartype), vartype)
      colnames(table_res) <- c(paste("Not", each), each)
      
      fish_result = fisher.test(table(data.frame(residueName = (p_annotate_bs[,interested_par] == each), Disease = p_annotate_bs$VarType == vartype)))
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"estimate"] = fish_result$estimate
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_low"] = fish_result$conf.int[1]
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"ci_up"] = fish_result$conf.int[2]
      ratio_amino[ratio_amino[,interested_par] == each & ratio_amino$vartypes == vartype,"pvalue"] = fish_result$p.value
    }
  }
  ratio_amino
}
<<<<<<< HEAD
apply(snp_dist_nof_var, 1, add_type_column)
add_type_column <- function(onerow){
if (onerow["type1"] == onerow["type2"]) {
onerow["type"] = paste(onerow["type1"], onerow["type2"])
} else {
onerow["type"] = "Polymorphism Disease"
}
}
apply(snp_dist_nof_var, 1, add_type_column)
View(snp_dist_nof_var)
View(snp_dist_nof_var)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type1 + type2 ~.)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type1 + type2 ~.) + coord_cartesian(xlim = c(0, 50))
snp_dist_nof_var$type = paste(sort(c(snp_dist_nof_var$type1,snp_dist_nof_var$type2))
)
View(snp_dist_nof_var)
snp_dist_nof_var$type = paste(snp_dist_nof_var$type1,snp_dist_nof_var$type2)
View(snp_dist_nof_var)
snp_dist_nof_var[snp_dist_nof_var$type1 != snp_dist_nof_var$type2,"type"] <- "Polymorphism Disease"
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50)) + scale_colour_brewer()
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50)) + scale_colour_brewer(palette="Blues")
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=TRUE) + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50)) + scale_colour_brewer(palette="Blues")
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50)) + scale_colour_brewer(type="seq", palette=3)
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +scale_colour_brewer(type="seq", palette=3)+ facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")) + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradientt(low = "white", high = "blue") + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50))
library("scales")
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradientt(low = "white", high = "blue") + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue") + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue") + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Disease Disease", "Polymorphism Disease")), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue") + facet_grid(type ~.) + coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Disease Disease", "Polymorphism Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Polymorphism Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Disease Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ coord_cartesian(xlim = c(0, 50))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Disease Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ coord_cartesian(xlim = c(0, 50), ylim=c(0,200))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Disease Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ scale_x_continuous(limits = c(0, 50)) + scale_y_continuous(limits=c(0,200))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Disease Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ scale_x_continuous(limits = c(0, 50)) + scale_y_continuous(limits=c(0,200), expand=c(0,0))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Disease Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ scale_x_continuous(limits = c(0, 50), expand=c(0,0)) + scale_y_continuous(limits=c(0,200), expand=c(0,0))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Polymorphism Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ scale_x_continuous(limits = c(0, 50), expand=c(0,0)) + scale_y_continuous(limits=c(0,200), expand=c(0,0))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Polymorphism Disease")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ scale_x_continuous(limits = c(0, 50), expand=c(0,0)) + scale_y_continuous(expand=c(0,0))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified" & type %in% c("Polymorphism Polymorphism")), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ scale_x_continuous(limits = c(0, 50), expand=c(0,0)) + scale_y_continuous(expand=c(0,0))
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ scale_x_continuous(limits = c(0, 50), expand=c(0,0)) + scale_y_continuous(expand=c(0,0))
source('~/SIFTS.py/analysis.R')
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist)) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) + facet_grid(type1 + type2 ~.)
source('~/SIFTS.py/analysis.R')
ggplot(subset(snp_dist_nof_var,type1 != "Unclassified" & type2 != "Unclassified"), aes(x=spa_dist, y=seq_dist))  + facet_grid(type ~.) + stat_density2d(geom="tile",aes(fill=..density..), contour=FALSE) +  scale_fill_gradient(low = "white", high = "blue")+ scale_x_continuous(limits = c(0, 50), expand=c(0,0)) + scale_y_continuous(expand=c(0,0))
source('~/SIFTS.py/analysis.R')
source('~/SIFTS.py/analysis.R')
rnorm(n, sd=10) %% 1
rnorm(10, sd=10) %% 1
ans<-rnorm(10, sd=10)
ans
ans%%1
hist(rnorm(1000, sd=10) %% 1)
hist(rnorm(10000, sd=10) %% 1)
hist(rnorm(100000, sd=10) %% 1)
hist(rnorm(1000000, sd=10) %% 1)
hist(rnorm(10000000, sd=10) %% 1)
rm(ls=list())
rm(list=ls())
protein_annotate<- read.table("./Data/SNPOnStruct_final_2", sep = "\t", header = F)
protein_annotate<- read.table("./Data/SNPOnStruct_final_2.txt", sep = "\t", header = F)
protein_annotate<- read.table("./Data/SNPOnStruct_final.txt", sep = "\t", header = F, quote = "", na.string = "\\N")
protein_annotate<- read.table("./Data/SNPOnStruct_final.txt", sep = "\t", header = F, quote = "", na.string = "\\N")
#
colnames(protein_annotate)<-c("pdbid", "biounit", "ModelID", "chainid", "resnam", "resnum", "structcode", "ssa", "rsa", "resolution", "UniProtID", "uniprot_resnum", "BindingSiteComment", "distance", "ligandName", "genename", "FTID", "AABefore", "AAAfter", "VarType", "dbSNPID", "DiseaseName", "AABeforeProp", "AAAfterProp")
protein_annotate$location = "Core"
#MAX_ACC["GLY"] = 84.0
protein_annotate$location[protein_annotate$ssa > 5] = "Surface"
protein_annotate[ which(protein_annotate$distance <= 4.0 | !is.na(protein_annotate$BindingSiteComment)),'location'] = "Binding Site"
View(protein_annotate)
ggplot(protein_annotate, aes(x=ssa)) +
geom_histogram() + facet_grid(.~location)
library(ggplot2)
ggplot(protein_annotate, aes(x=ssa)) +
geom_histogram() + facet_grid(.~location)
ggplot(subset(protein_annotate, location %in% c("Surface", "Binding Site")), aes(x=ssa)) +
geom_density() + facet_grid(location~.)
ggplot(subset(protein_annotate, location %in% c("Surface", "Binding Site")), aes(x=ssa, color = location)) +
geom_density()
ggplot(subset(protein_annotate, location %in% c("Surface", "Binding Site")), aes(x=rsa, color = location)) +
geom_density()
ggplot(protein_annotate, aes(x=rsa, color = location)) +
geom_density()
library("fmsb")
library("epitools")
install.packages(epitools)
library("epitools")
install.packages("epitools")
library("epitools")
table(protein_annotate$VarType == "Disease", protein_annotate$location == "Core")
table_res <- table(protein_annotate$VarType == "Disease", protein_annotate$location == "Core")
colnames(table_res) <- c("Non Disease", "Disease")
colnames(table_res) <- c("Non Core", "Core")
table_res
table(protein_annotate$VarType == "Disease")
colnames(table_res) <- c("Non Disease", "Disease")
rownames(table_res) <- c("Non Core", "Core")
table_res
rownames(table_res) <- c("Non Disease", "Disease")
colnames(table_res) <- c("Non Core", "Core")
table_res
oddsratio.wald(table_res)
oddsratio.wald(table_res["Disease",])
table_res["Disease",]
table_res
oddsratio.wald(table_res[c("Disease", "Non Disease"),c("Core", "Non Core")])
oddsratio.wald(table_res)
5108*7021/(1492*7086)
table_res <- table(subset(protein_annotate, location %in% c("Surface", "Binding Site"))$VarType == "Disease", subset(protein_annotate, location %in% c("Surface", "Binding Site"))$location == "Binding Site")
rownames(table_res) <- c("Non Disease", "Disease")
colnames(table_res) <- c("Surface", "Binding Site")
oddsratio.wald(table_res)
table_res <- table(subset(protein_annotate, location %in% c("Surface", "Binding Site"))$VarType == "Disease", subset(protein_annotate, location %in% c("Surface", "Binding Site"))$location == "Surface")
rownames(table_res) <- c("Non Disease", "Disease")
colnames(table_res) <- c("Binding Site", "Surface")
oddsratio.wald(table_res)
table_res <- table(subset(protein_annotate, location %in% c("Core", "Binding Site"))$VarType == "Disease", subset(protein_annotate, location %in% c("Core", "Binding Site"))$location == "Core")
rownames(table_res) <- c("Non Disease", "Disease")
colnames(table_res) <- c("Binding Site", "Core")
oddsratio.wald(table_res)
View(protein_annotate)
?table
c(1,2)/c(2,3)
View(protein_annotate)
?table
help(melt)
library(reshape2)
help(melt)
?geom_bar
library(ggplot2)
?geom_bar
?chisq.test
?scale_x_discrete
library(ggplot2)
?scale_x_discrete
install.packages(bstats)
library(bstats)
install.packages("bstats")
sc_v = c(135.0, 163.0, 130.0, 157.0, 198.0, 205.0, 169.0, 136.0, 142.0, 197.0, 106.0, 84.0, 184.0, 164.0, 248.0, 227.0, 142.0, 194.0, 222.0, 188.0)
hist(sc_v)
sum(sc_v < 170)
sc_volumn = data.frame(aa_name = c("ALA","CYS","ASP","GLU","PHE","GLY","HIS","ILE","LYS","LEU","MET","ASN","PRO","GLN","ARG","SER","THR","VAL","TRP","TYR"),size = c(106.0,135.0,163.0,194.0,197.0,84.0,184.0,169.0,205.0,164.0,188.0,157.0,136.0,198.0,248.0,130.0,142.0,142.0,227.0,222.0))
sc_volumn
cut(sc_volumn$volumn, breaks=3)
sc_volumn$volumn
cut(sc_volumn$volumn, breaks=3)
sc_volumn = data.frame(aa_name = c("ALA","CYS","ASP","GLU","PHE","GLY","HIS","ILE","LYS","LEU","MET","ASN","PRO","GLN","ARG","SER","THR","VAL","TRP","TYR"), volumn = c(106.0,135.0,163.0,194.0,197.0,84.0,184.0,169.0,205.0,164.0,188.0,157.0,136.0,198.0,248.0,130.0,142.0,142.0,227.0,222.0))
cut(sc_volumn$volumn, breaks=3)
?cut
sc_volumn$volumn.c = cut(sc_volumn$volumn, breaks=3, label = c("small", "median", "large"))
summary(sc_volumn)
sc_volumn = data.frame(AAName = c("ALA","CYS","ASP","GLU","PHE","GLY","HIS","ILE","LYS","LEU","MET","ASN","PRO","GLN","ARG","SER","THR","VAL","TRP","TYR"), volumn = c(106.0,135.0,163.0,194.0,197.0,84.0,184.0,169.0,205.0,164.0,188.0,157.0,136.0,198.0,248.0,130.0,142.0,142.0,227.0,222.0))
sc_volumn$volumn.c = cut(sc_volumn$volumn, breaks=3, label = c("small", "median", "large"))
install.packags(Biostrings)
install.packages("Biostrings")
install.packages("peplib")
data(blosum62)
library(peplib)
data(blosum62)
View(blosum62)
blosum_melt<-melt(blosum62)
library(reshape2)
blosum_melt<-melt(blosum62)
View(blosum_melt)
View(sc_volumn)
View(blosum_melt)
hist(blosum_melt$value)
max(blosum_melt$value)
blosum_melt[blosum_melt$value == max(blosum_melt$value),]
library("seqinr")
install.packages("seqinr")
library(seqinr)
a()
aa()
aaa()
a(aaa())
aaa(a())
View(sc_volumn)
View(blosum62)
View(sc_volumn)
blosum_melt$volumn_change <- apply(blosum_melt, 1, function(x) { paste(as.character(sc_volumn[sc_volumn$AAName == x[["Var1"]], "volumn.c"]), "to", as.character(sc_volumn[sc_volumn$AAName == x[["Var2"]], "volumn.c"]))})
View(blosum_melt)
blosum_melt$volumn_change <- apply(blosum_melt, 1, function(x) { print(x[["Var1"]]); paste(as.character(sc_volumn[sc_volumn$AAName == x[["Var1"]], "volumn.c"]), "to", as.character(sc_volumn[sc_volumn$AAName == x[["Var2"]], "volumn.c"]))})
blosum_melt <- subset(blosum_melt, Var1 != "GAP" & Var2 != "GAP")
blosum_melt$volumn_change <- apply(blosum_melt, 1, function(x) { print(x[["Var1"]]); paste(as.character(sc_volumn[sc_volumn$AAName == x[["Var1"]], "volumn.c"]), "to", as.character(sc_volumn[sc_volumn$AAName == x[["Var2"]], "volumn.c"]))})
blosum_melt$volumn_change <- apply(blosum_melt, 1, function(x) { print(toupper(x[["Var1"]])); paste(as.character(sc_volumn[sc_volumn$AAName == toupper(aaa(x[["Var1"]])), "volumn.c"]), "to", as.character(sc_volumn[sc_volumn$AAName == toupper(aaa(x[["Var2"]])), "volumn.c"]))})
blosum_melt$volumn_change <- apply(blosum_melt, 1, function(x) { print(toupper(aaa(x[["Var1"]]))); paste(as.character(sc_volumn[sc_volumn$AAName == toupper(aaa(x[["Var1"]])), "volumn.c"]), "to", as.character(sc_volumn[sc_volumn$AAName == toupper(aaa(x[["Var2"]])), "volumn.c"]))})
View(sc_volumn)
View(blosum_melt)
blosum_melt <- subset(blosum_melt, !(Var1 %in% c("GAP", "B", "Z", "X")) & !(Var2 %in% c("GAP", "B", "Z", "X")))
blosum_melt$volumn_change <- apply(blosum_melt, 1, function(x) { print(toupper(aaa(x[["Var1"]]))); paste(as.character(sc_volumn[sc_volumn$AAName == toupper(aaa(x[["Var1"]])), "volumn.c"]), "to", as.character(sc_volumn[sc_volumn$AAName == toupper(aaa(x[["Var2"]])), "volumn.c"]))})
View(blosum_melt)
ggplot(blosum_melt, aes(y=value, color = volumn_change)) + geom_histogram()
library(ggplot2)
ggplot(blosum_melt, aes(y=value, color = volumn_change)) + geom_histogram()
ggplot(blosum_melt, aes(x=value, color = volumn_change)) + geom_histogram()
ggplot(blosum_melt, aes(x=value, color = volumn_change)) + geom_density()
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + facet_grid(volumn_change~.)
blosum_melt$volumn_change <- apply(blosum_melt, 1, function(x) { alist = c(as.character(sc_volumn[sc_volumn$AAName == toupper(aaa(x[["Var1"]])), "volumn.c"]), as.character(sc_volumn[sc_volumn$AAName == toupper(aaa(x[["Var2"]])), "volumn.c"])); alist = sort(alist); print(alist); paste(alist[1], "to", alist[2])})
View(blosum_melt)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + facet_grid(volumn_change~.)
ggplot(blosum_melt, aes(x=value)) + geom_density() + facet_grid(volumn_change~.)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + facet_grid(volumn_change~.)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + facet_grid(volumn_change~.) + geom_vline(aes(xintercept=mean(value),  colour=spot),linetype="dashed", size=1)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + facet_grid(volumn_change~.)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + facet_grid(volumn_change~.) + geom_vline(aes(xintercept=mean(value),  colour=I("red")),linetype="dashed", size=1)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + facet_grid(volumn_change~.) + geom_vline(aes(xintercept=mean(value),  colour="red"),linetype="dashed", size=1)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + geom_vline(aes(xintercept=mean(value),  colour="red"),linetype="dashed", size=1) + facet_grid(volumn_change~.)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + geom_vline(aes(xintercept=mean(value)),linetype="dashed", size=1) + facet_grid(volumn_change~.)
blosum_melt$value.mean = apply(blosum_melt, 1, function(x){mean(subset(blosum_melt, volumn_change==x[["volumn_change"]])$value)})
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + geom_vline(aes(xintercept=value.mean),linetype="dashed", size=1) + facet_grid(volumn_change~.)
ggplot(blosum_melt, aes(x=value)) + geom_histogram() + geom_vline(aes(xintercept=value.mean),linetype="dashed", size=1, color = "red") + facet_grid(volumn_change~.)
install.packages("dplyr")
library(dplyr)
?slice
n(1)
n()
?strsplit
fisher.test(c(7,102,165,246))
fisher.test(matrix(c(7,102,165,246),2,2))
fisher.test(matrix(c(96,102,165,246),2,2))
matrix(c(96,102,165,246),2,2)
matrix(c(96,102-96,165,246-165),2,2)
fisher.test(matrix(c(96,102-96,165,246-165),2,2))
fisher.test(matrix(c(96,102-96,165,246-165),2,2))
fisher.test(matrix(c(96,112-96,165,246-165),2,2))
fisher.test(matrix(c(96,202-96,165,246-165),2,2))
fisher.test(matrix(c(7,96-7,165,246-165),2,2))
View(sc_volumn)
?table
?merge
?write.table
blosum_melt$value.mean = apply(blosum_melt, 1, function(x){mean(subset(blosum_melt, volumn_change==x[["volumn_change"]])$value)})
mean
?merge
?wilcox.test(
)
?wilcox.test
?merge
install.packages("boot")
library(boot)
version()
version
?boot.ci
?fisher.test
?paste
install.packages("VennDiagram")
library(VennDiagram)
?draw.triple.venn
?pdf
?draw.triple.venn
?plot
runif(10)
runif(10,2,2)
plot(runif(10), runif(10))
plot(runif(10), runif(10), col = 552)
plot(runif(10), runif(10), col = "red")
"red"*10
"red"[1:10]
c("red")[1][1:10]
ones(1)
matrix(1,1,10)
c("red")[matrix(1,1,10)]
plot(runif(10), runif(10), col = c("red")[matrix(1,1,10)])
plot(runif(10), runif(10), col = factor(c("red")[matrix(1,1,10)])
)
factor(c("red")[matrix(1,1,10)])
as.character(factor(c("red")[matrix(1,1,10)]))
colorlist = c(as.character(factor(c("red")[matrix(1,1,5)])), as.character(factor(c("blue")[matrix(1,1,5)])))
colorlist
plot(runif(10), runif(10), col = colorlist)
plot(runif(10), runif(10), col = factor(colorlist))
plot(runif(10), runif(10), col = as.character(factor(colorlist)))
?median
?lm
install.packages("ROCR")
version
?abline
?merge
demo(ROCR)
library("ROCR")
demo(ROCR)
?svm
library('e1071')
install.packages('e1071')
library('e1071')
?svm
version
?predict
?predict.svm
?performance
?subset
?intersect
?pdb
?pdf
?write.table
version
?ddply
library(dplyr)
?ddply
=======
ratio_amino <- aa_change_preference(protein_annotate_onlysnp, "volumn_change")
ratio_amino_sort <- ratio_amino[with(ratio_amino, order(-estimate)),]
ratio_amino$volumn_change <- factor(ratio_amino$volumn_change, levels = as.character(subset(ratio_amino_sort, vartypes == "Disease")$volumn_change))
ggplot(subset(ratio_amino, vartypes %in% c("Disease", "Polymorphism")), aes(x = volumn_change, y = estimate, ymin = ci_low, ymax = ci_up)) + geom_pointrange(aes(col = vartypes), position=position_dodge(width=0.30))  + ylab("Odds ratio & 95% CI") + geom_hline(aes(yintercept = 1)) + xlab("") + scale_y_log10() + theme(axis.text.x = element_text( size=10))
ggsave(filename = "tmp.pdf", height=4, width=12) 
ratio_amino <- aa_change_preference(subset(protein_annotate_onlysnp, location == "Binding Site"), "volumn_change")
############################Plot odds ratio######################################
ratio_amino_sort <- ratio_amino[with(ratio_amino, order(-estimate)),]
ratio_amino$volumn_change <- factor(ratio_amino$volumn_change, levels = as.character(subset(ratio_amino_sort, vartypes == "Disease")$volumn_change))
ggplot(subset(ratio_amino, vartypes %in% c("Disease", "Polymorphism")), aes(x = volumn_change, y = estimate, ymin = ci_low, ymax = ci_up)) + geom_pointrange(aes(col = vartypes), position=position_dodge(width=0.30))  + ylab("Odds ratio & 95% CI") + geom_hline(aes(yintercept = 1)) + xlab("") + scale_y_log10() + theme(axis.text.x = element_text( size=10))
ggsave(filename = "tmp.pdf", height=4, width=12) 
model <- lm(is_disease ~ hydro_change + size_change, data = protein_annotate_onlysnp)
summary(model)
model <- lm(is_disease ~ hydro_change + size_change + location, data = protein_annotate_onlysnp)
summary(model)
model <- glm(is_disease ~ hydro_change + size_change + location, data = protein_annotate_onlysnp)
summary(model)
predict(modelpre_result <- predict(model))
pre_result <- predict(model)
pre_result
summary(model)
pred <- prediction(pre_result, protein_annotate_onlysnp$is_disease)
perf <- performance(pred, measure = "tpr", x.measure = "fpr") 
plot(perf, col=rainbow(10))
install.packages("ROCR")
names(protein_annotate_onlysnp)
q()
